<?php

namespace Tests\Feature;

use App\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class UserTest extends TestCase
{
    use DatabaseTransactions;

    protected  $user;
    Protected  $email='firstTest@gmail.com';
    Protected  $password=12345678;
    function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user =User::firstOrCreate(['email'=>$this->email],[
            'email' => $this->email,
            'name' => 'first',
            'password' => bcrypt($this->password),
        ]);
    }
//
    /**
     * A use login test with right data.
     *
     * @return void
     */
    public function testUserLoginWithRightData()
    {
        $user = factory(User::class)->create([
            'password' => bcrypt($password = 'testPassword'),
        ]);

        $response = $this->post('/login', [
            'email' => $user->email,
            'password' => $password,
        ]);

        $response->assertRedirect('/home');
        $this->assertAuthenticatedAs($user);
    }

    /**
     * A use login test with wrong data.
     *
     * @return void
     */
    public function testUserLoginWithWrongData()
    {
        $user = factory(User::class)->create([
            'password' => bcrypt('testPassword'),
        ]);

        $response = $this->from('/login')->post('/login', [
            'email' => $user->email,
            'password' => 'invalid-password',
        ]);

        $response->assertRedirect('/login');
        $response->assertSessionHasErrors('email');
        $this->assertTrue(session()->hasOldInput('email'));
        $this->assertFalse(session()->hasOldInput('password'));
        $this->assertGuest();
    }

}
